//
//  LoginAuth0ViewController.swift
//  PatMe
//
//  Created by Juan Camilo on 9/12/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// {PRODUCT_BUNDLE_IDENTIFIER}://YOUR_DOMAIN/ios/{PRODUCT_BUNDLE_IDENTIFIER}/callback
// com.Mayasoft21.PatMe://patme.eu.auth0.com/ios/com.Mayasoft21.PatMe/callback
import UIKit
import Auth0
protocol LoginAuth0DisplayLogic: AnyObject
{
  func displaySomething(viewModel: LoginAuth0.Something.ViewModel)
}

class LoginAuth0ViewController: UIViewController, LoginAuth0DisplayLogic
{
  var interactor: LoginAuth0BusinessLogic?
  var router: (NSObjectProtocol & LoginAuth0RoutingLogic & LoginAuth0DataPassing)?
  private var isAuthenticated = false
    @IBOutlet weak var loginBtn: UIButton!
    @IBOutlet weak var registerBtn: UIButton!
    @IBOutlet weak var titleLbl: UILabel!
    @IBOutlet weak var desLbl: UILabel!
    
    
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginAuth0Interactor()
    let presenter = LoginAuth0Presenter()
    let router = LoginAuth0Router()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
      loginBtn.layer.cornerRadius = 16
    
      registerBtn.layer.cornerRadius = 16
     
      titleLbl.text = NSLocalizedString("login_view_title_txt_1", comment: "")
      desLbl.text = NSLocalizedString("login_view_title_txt_2", comment: "")
      loginBtn.setTitle(NSLocalizedString("login_view_title_btn_1", comment: ""), for: .normal)
      registerBtn.setTitle(NSLocalizedString("login_view_title_btn_2", comment: ""), for: .normal)
      
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = LoginAuth0.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: LoginAuth0.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }

    @IBAction func OnSingupBtn(_ sender: Any) {
        print("Sign Up")
        let domain = "https://patme.eu.auth0.com/api/v2/"
        if(!isAuthenticated){
            Auth0
                .webAuth()
                .scope("openid profile")

                .logging(enabled: true)
                .parameters(["language" : NSLocalizedString("language", comment: "")])

                .audience(domain)
                
                .start {
                    switch $0 {
                        case .failure(let error):
                            print("Error: \(error)")
                        case .success(let credentials):
                            guard let accessToken = credentials.accessToken else { return }
                            print("Authentication Succes")
                            print("Id Token: \(credentials)")
                            print("Acces Token: \(credentials.accessToken ?? "No access token found")")
                            print("Id Token: \(credentials.idToken ?? "No ID token found")")
                        UserDefaultUtils.setToken(token: credentials.accessToken ?? "")
                            DispatchQueue.main.async {
                                self.isAuthenticated = true
                                let storyboard = UIStoryboard (name: "Main", bundle: nil)
                                       let vc = storyboard.instantiateViewController(withIdentifier: "StartWelcomeViewController")as? StartWelcomeViewController

                                       // you can set any value stored in the destination VC here
                               
                                self.navigationController?.pushViewController(vc!, animated: true)
                            }
                        }
                    }
        } else {
            Auth0
                .webAuth()
                .clearSession(federated:true){
                    switch $0{
                        case true:
                            DispatchQueue.main.async {
                               
                                self.isAuthenticated = false
                            }
                        case false:
                            DispatchQueue.main.async {
                                self.showSuccessAlert("An error occurred")
                        }
                    }
                }
        }
    }
    @IBAction func logBtn(_ sender: Any) {
        print("log in")
        guard let clientInfo = pOlistValues(bundle: Bundle.main) else { return }
        let domain = "https://patme.eu.auth0.com/api/v2/"
        if(!isAuthenticated){
            Auth0
                .webAuth()
   
                .logging(enabled: true)
                .parameters(["language" : NSLocalizedString("language", comment: ""),"start_login" : "true"])
                .audience(domain)
        
                .start {
                    switch $0 {
                        case .failure(let error):
                            print("Error: \(error)")
                        case .success(let credentials):
                            guard let accessToken = credentials.accessToken else { return }
                            print("Authentication Succes")
                            print("Id Token: \(credentials)")
                            print("Acces Token: \(credentials.accessToken ?? "No access token found")")
                            print("Id Token: \(credentials.idToken ?? "No ID token found")")
                        UserDefaultUtils.setToken(token: credentials.accessToken ?? "")
                            DispatchQueue.main.async {
                                self.isAuthenticated = true
                                let storyboard = UIStoryboard (name: "Main", bundle: nil)
                                       let vc = storyboard.instantiateViewController(withIdentifier: "StartWelcomeViewController")as? StartWelcomeViewController

                                       // you can set any value stored in the destination VC here
                                
                                self.navigationController?.pushViewController(vc!, animated: true)
                               
                            }
                    }
                }
        }
        else{
            Auth0
                .webAuth()
                .clearSession(federated:true){
                    switch $0{
                        case true:
                            DispatchQueue.main.async {
                               
                                self.isAuthenticated = false
                            }
                        case false:
                            DispatchQueue.main.async {
                                self.showSuccessAlert("An error occurred")
                        }
                    }
                }
        }
     
        
    }
   fileprivate func showSuccessAlert(_ message: String) {
       let alert = UIAlertController(title: "Message", message: message, preferredStyle: .alert)
       alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
       self.present(alert, animated: true, completion: nil)
   }
   
}
func pOlistValues(bundle: Bundle) -> (clientId: String, domain: String)? {
    guard
        let path = bundle.path(forResource: "Auth0", ofType: "plist"),
        let values = NSDictionary(contentsOfFile: path) as? [String: Any]
        else {
            print("Missing Auth0.plist file with 'ClientId' and 'Domain' entries in main bundle!")
            return nil
    }

    guard
        let clientId = values["ClientId"] as? String,
        let domain = values["Domain"] as? String
        else {
            print("Auth0.plist file at \(path) is missing 'ClientId' and/or 'Domain' entries!")
            print("File currently has the following entries: \(values)")
            return nil
    }
    return (clientId: clientId, domain: domain)
    
   
}


 




