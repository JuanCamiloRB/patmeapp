//
//  RegisterPetViewController.swift
//  patmeapp
//
//  Created by Juan Camilo on 5/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MaterialComponents.MaterialTextFields

protocol RegisterPetDisplayLogic: AnyObject
{
  func displaySomething(viewModel: RegisterPet.Something.ViewModel)
}
@IBDesignable
class RegisterPetViewController: ResourcesViewController, RegisterPetDisplayLogic
{
    var interactor: RegisterPetBusinessLogic?
    var router: (NSObjectProtocol & RegisterPetRoutingLogic & RegisterPetDataPassing)?
    var petSpecie = String()
    var petName = String()
    var tokenId: String? = ""
    var genere = String()
    var checkBtn = true
    var petObject: PetModel!
    
    var keyboardHeight = CGFloat(0)
    private var textInput: MDCTextField!
    private var controller: MDCTextInputControllerOutlined!
    private let textColor = UIColor(red: (250/255.0), green: (191/255.0), blue: (161/255.0), alpha: 1.0)
    let checkf =  UIImage(named: "check")
    let checkEmpty =  UIImage(named: "Check_circle")
    let eyeIcon = UIImageView(image: UIImage(named: "CheckIcon"))
    // Dynamic dark & light color created in the assets folder
    
    private var placeHolderText = ""
   
    

    @IBOutlet weak var descLbl: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contiBtn: UIButton!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var textIn: UITextField!
    @IBOutlet weak var checkFill: UIButton!
    
    // MARK: Object lifecycle
    @IBInspectable var setPlaceholder: String{
        get{
            
            return placeHolderText + petSpecie
        }
        set(str){
            placeHolderText = str + petSpecie
        }
    }
    
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RegisterPetInteractor()
        let presenter = RegisterPetPresenter()
        let router = RegisterPetRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        var speciesTxt = petObject.specie == MainSpeciesEnum.other ? petObject.customSpecie?.label :  petObject.specie.getLocalizable()
        var txt = String(format: NSLocalizedString("register_view_title_txt_1", comment: ""),speciesTxt as! CVarArg)
        lblName.text = txt
        placeHolderText = NSLocalizedString("register_view_title_placeholder_1", comment: "") + speciesTxt!
        setupInputView()
        setupContoller()
        textIn.isHidden = true
        contiBtn.isEnabled = false
        contiBtn.alpha = 0.3
        hideKeyboardWhenTappedAround(onView: self.view)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
        setupInputView()
        setupContoller()
        lblName.text = txt
        descLbl.text = NSLocalizedString("register_view_title_txt_3", comment: "")
        contiBtn.setTitle(NSLocalizedString("register_view_btn_txt_1", comment: ""), for: .normal)
        DispatchQueue.main.async {
        
            self.textIn.becomeFirstResponder()
          
        }
    }
    @objc func keyboardWillShow(notification:NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
                  keyboardHeight = keyboardSize.height
               
                    // The 1st keyboardWillShow gets the keyboard size height then observer removed as no need to get keyboard height every time it shows or hides
                    NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
                    
                    // Store KeyboardHeight in UserDefaults to use when in Edit Mode
                    UserDefaults.standard.set(keyboardHeight, forKey: "KeyboardHeight")
                    UserDefaults.standard.synchronize()
                }

    }
    
    @objc func keyboardWillHide(notification:NSNotification) {
        
        let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
    }
    private func setupInputView(){
        //MARK: Text Input Setup
        
        if let _ = view.viewWithTag(1){return}
        textInput = MDCTextField()
        textInput.tag = 1
        textInput.font = UIFont(name: "Rubik", size: 16)
        textInput.translatesAutoresizingMaskIntoConstraints = false
        textInput.placeholderLabel.isEnabled = true
        textInput.isEnabled = true
        textInput.sizeToFit()
        textInput.rightViewMode = .always
        textInput.clearButton.isHidden = true
        textInput.text = petObject.name
        eyeIcon.isHidden = true
        view.addSubview(textInput)
        textInput.placeholder = placeHolderText
        textInput.delegate = self
        textInput.textColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        NSLayoutConstraint.activate([
            (textInput.topAnchor.constraint(equalTo: textIn.topAnchor)),
            (textInput.bottomAnchor.constraint(equalTo: textIn.bottomAnchor)),
            (textInput.leadingAnchor.constraint(equalTo: textIn.leadingAnchor)),
            (textInput.trailingAnchor.constraint(equalTo: textIn.trailingAnchor))
        ])
    }
    
    private func setupContoller(){
        // MARK: Text Input Controller Setup
        
        controller = MDCTextInputControllerOutlined(textInput: textInput)
        
        controller.activeColor = textColor
        controller.normalColor = textColor
        controller.textInput?.textColor = UIColor(red: (26/255.0), green: (26/255.0), blue: (26/255.0), alpha: 1.0)
        controller.inlinePlaceholderColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderActiveColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderNormalColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.textInputFont = UIFont(name: "Rubik", size: 16)
        controller.textInputClearButtonTintColor =  UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.borderRadius = 16
        controller.leadingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.inlinePlaceholderFont = UIFont(name: "Rubik", size: 16)
        controller.trailingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.floatingPlaceholderScale = 1.0000001
        controller.isAccessibilityElement = true
        controller.isFloatingEnabled = true
        
        controller.underlineHeightActive = 20
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = RegisterPet.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: RegisterPet.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    @IBAction func OnCheckBtn(_ sender: Any) {
          checkBtn = !checkBtn
        if checkBtn == false {
           
            checkFill.setImage(checkEmpty, for: .normal)
            
        }
        
        if checkBtn == true {
            checkFill.setImage(checkf, for: .normal)
        }
        
    }
    @IBAction func onBackBtn(_ sender: Any) {
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "StartWelcomeViewController")as? StartWelcomeViewController
        
        // you can set any value stored in the destination VC here
    
        
        vc!.petObject =  petObject
        self.navigationController?.pushViewController(vc!, animated: true)
    }
   
    
    
    @IBAction func onContBtn(_ sender: Any) {
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "GenereViewControllerViewController")as? GenereViewControllerViewController
        
        // you can set any value stored in the destination VC here
        petObject.name = petName
        vc!.petObject = petObject
    
        self.navigationController?.pushViewController(vc!, animated: true)
    }
    func animateViewMoving (_ up:Bool, moveValue :CGFloat){
            let movementDuration:TimeInterval = 0.2
            let movement:CGFloat = ( up ? -moveValue : moveValue)
            UIView.beginAnimations( "animateView", context: nil)
            UIView.setAnimationBeginsFromCurrentState(true)
            UIView.setAnimationDuration(movementDuration )
            self.contiBtn.frame = self.contiBtn.frame.offsetBy(dx: 0,  dy: movement)
            UIView.commitAnimations()
        print("Moviendo")
        }
    
}
extension RegisterPetViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        //For mobile numer validation
        textInput.trailingView = eyeIcon
        if textField == textInput {
            DispatchQueue.main.async{
                
                var text: String = self.textInput.text!
                
                self.petName = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? ""
                
                let replaced = self.petName.replacingOccurrences(of: "Optional", with: "Small")
                self.petName = replaced
                print(replaced)
            }
            let texto = textField.text
            
            if (((texto as NSString?)?.replacingCharacters(in: range, with: string).count)! > 2 && ((texto as NSString?)?.replacingCharacters(in: range, with: string).count)! < 21) {
               
                textInput.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
                contiBtn.isEnabled = true
                contiBtn.alpha = 1
                
                eyeIcon.isHidden = false
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! >= 21) {
               
                
                textIn.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
                eyeIcon.isHidden = true
                contiBtn.isEnabled = false
                contiBtn.alpha = 0.3
                
                
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! <= 2) {
               
                contiBtn.isAccessibilityElement = false
                eyeIcon.isHidden = true
                contiBtn.isEnabled = false
                contiBtn.alpha = 0.3
                
            }
            let allowedCharacters = CharacterSet(charactersIn:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ")//Here change this characters based on your requirement
            let characterSet = CharacterSet(charactersIn: string)
            return allowedCharacters.isSuperset(of: characterSet)
            
            
        }
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
       
               animateViewMoving(false, moveValue: keyboardHeight)
        print(keyboardHeight)
        print("down")
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        print("up")
        animateViewMoving(true, moveValue: keyboardHeight)
        print(keyboardHeight)
        if textField == textIn {
            print("You edit myTextField")
            let texto = textIn.text ?? ""
            if (texto.count > 1 && texto.count < 21) {
                print("Conteo",texto.count)
                textInput.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
                eyeIcon.isHidden = false
                
            }
        
        }
        
    }
    
}

