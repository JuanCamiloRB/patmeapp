//
//  OnBoardingViewController.swift
//  PatMe
//
//  Created by Juan Camilo on 3/12/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Auth0
import SMPageControl
import POEditorAPI

protocol OnBoardingDisplayLogic: AnyObject
{
  func displaySomething(viewModel: OnBoarding.Something.ViewModel)
}

class OnBoardingViewController: UIViewController, OnBoardingDisplayLogic
{
  var interactor: OnBoardingBusinessLogic?
  var router: (NSObjectProtocol & OnBoardingRoutingLogic & OnBoardingDataPassing)?
    let  cellWidth = UIScreen.main.bounds.width
    let titles = [NSLocalizedString("onBoard_view_title_txt_1", comment: ""),NSLocalizedString("onBoard_view_title_txt_2", comment: ""),NSLocalizedString("onBoard_view_title_txt_3", comment: "")]
    let imageN = ["First","Second","Third"]
    var pageControl = SMPageControl()
    private var isAuthenticated = false
    @IBOutlet weak var pControl: UIPageControl!
    @IBOutlet weak var colletionView: UICollectionView!
    @IBOutlet weak var btnGet: UIButton!
    @IBOutlet weak var btnCon: UIButton!
    @IBOutlet weak var btnSkip: UIButton!
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = OnBoardingInteractor()
    let presenter = OnBoardingPresenter()
    let router = OnBoardingRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
      colletionView.dataSource = self
      colletionView.delegate = self
      colletionView.register(UINib(nibName: "OnBoardingCell", bundle: nil), forCellWithReuseIdentifier: "OnBoardingCell")
      btnGet.layer.cornerRadius = 16
      btnGet.layer.isHidden = true
      btnGet.setTitle(NSLocalizedString("onBoard_view_title_btn_1", comment: ""), for: .normal)
      btnSkip.setTitle(NSLocalizedString("onBoard_view_title_btn_2", comment: ""), for: .normal)
      btnCon.setTitle(NSLocalizedString("onBoard_view_title_btn_3", comment: ""), for: .normal)
      let startPage = 0
      
      if #available(iOS 14.0, *) {
          pControl.preferredIndicatorImage = UIImage(named: "Icon-Empty")
      
          // Fallback on earlier versions
      }
      if #available(iOS 14.0, *) {
          pControl.setIndicatorImage(UIImage(named: "Icon_filled"), forPage: startPage)
          // Fallback on earlier versions
          
      }
      
      if UserDefaults.standard.bool(forKey: "key") == true {
         
          let storyboard = UIStoryboard (name: "Main", bundle: nil)
                 let vc = storyboard.instantiateViewController(withIdentifier: "LoginAuth0ViewController")as? LoginAuth0ViewController
          self.navigationController?.pushViewController(vc!, animated: true)
      }
      let poeditor = POEditor(token: "72aa4db3f42dfaab1f00301e34d5d507")
      
      poeditor.listProjects { (result) in
                  
         switch result
         {
            case .success(let projects):
               print("Proyecto",projects)
             
                      
            case .failure(let error):
               print(error)
         }
      }
      
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    private func stylePageControl1() {
        self.pageControl.removeFromSuperview()
        pageControl = SMPageControl(frame: CGRect(x: self.pControl.frame.origin.x + 3, y: self.pControl.frame.origin.y, width: self.pControl.frame.size.width - 20, height: 20))
        pageControl.numberOfPages = 3


        let first = UIImage(named: "Icon-Empty")
      

        pageControl.setImage(first, forPage: 0)
        pageControl.setCurrentImage(first, forPage: 0)

        let third = UIImage(named: "Icon-Empty")
      

        pageControl.setImage(first, forPage: 2)
        pageControl.setCurrentImage(first, forPage: 2)
        
        let second = UIImage(named: "Icon_filled")
      

        pageControl.setImage(second, forPage: 1)
        pageControl.setCurrentImage(second, forPage: 1)
        pageControl.indicatorMargin = 30.0 // this is the space between the dots
        
        self.view.addSubview(pageControl)
    }
    
    private func stylePageControl() {
       
        self.pageControl.removeFromSuperview()
        pageControl = SMPageControl(frame: CGRect(x: self.pControl.frame.origin.x + 3, y: self.pControl.frame.origin.y, width: self.pControl.frame.size.width - 20, height: 20))
        pageControl.numberOfPages = 3

    //  the first (first) picture is the item in the bar, that is unused
    //  the second (currentFirst) is an item that we use, when this is the current active page
    //  in this example, we don't have dots, but we use "pictues" as dots
        
        let first = UIImage(named: "Icon-Empty")
        pageControl.setImage(first, forPage: 1)
        pageControl.setCurrentImage(first, forPage: 1)

        let third = UIImage(named: "Icon-Empty")
      
        pageControl.setImage(first, forPage: 2)
        pageControl.setCurrentImage(first, forPage: 2)
        
        let second = UIImage(named: "Icon_filled")
      
        pageControl.setImage(second, forPage: 0)
        pageControl.setCurrentImage(second, forPage: 0)
        pageControl.indicatorMargin = 30.0 // this is the space between the dots

        self.view.addSubview(pageControl)
    }
    private func stylePageControl2() {
        self.pageControl.removeFromSuperview()
        pageControl = SMPageControl(frame: CGRect(x: self.pControl.frame.origin.x + 3, y: self.pControl.frame.origin.y, width: self.pControl.frame.size.width - 20, height: 20))
        pageControl.numberOfPages = 3

    //  the first (first) picture is the item in the bar, that is unused
    //  the second (currentFirst) is an item that we use, when this is the current active page
    //  in this example, we don't have dots, but we use "pictues" as dots
        
   
        pageControl.indicatorMargin = 30.0 // this is the space between the dots
        pageControl.isHidden = true
        self.view.addSubview(pageControl)
    }
  func doSomething()
  {
    let request = OnBoarding.Something.Request()
    interactor?.doSomething(request: request)
  }
    
  
  func displaySomething(viewModel: OnBoarding.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
   
    @IBAction func onGetStarted(_ sender: Any) {
        guard let clientInfo = plistValues(bundle: Bundle.main) else { return }
        UserDefaults.standard.set(true, forKey: "key")
        UserDefaults.standard.synchronize()
        if(!isAuthenticated){
            Auth0
                .webAuth()
                .scope("openid profile")
                .audience("https://" + clientInfo.domain + "/userinfo")
                .start {
                    switch $0 {
                        case .failure(let error):
                            print("Error: \(error)")
                        case .success(let credentials):
                            guard let accessToken = credentials.accessToken else { return }
                            print("Authentication Succes")
                            print("Id Token: \(credentials)")
                            print("Acces Token: \(credentials.accessToken ?? "No access token found")")
                            print("Id Token: \(credentials.idToken ?? "No ID token found")")
                       
                        UserDefaultUtils.setToken(token: credentials.accessToken ?? "")
                            DispatchQueue.main.async {
                                self.isAuthenticated = true
                                let storyboard = UIStoryboard (name: "Main", bundle: nil)
                                       let vc = storyboard.instantiateViewController(withIdentifier: "StartWelcomeViewController")as? StartWelcomeViewController

                                       // you can set any value stored in the destination VC here
                                
                                self.navigationController?.pushViewController(vc!, animated: true)
                            }
                    }
                }
        }
        else{
            Auth0
                .webAuth()
                .clearSession(federated:false){
                    switch $0{
                        case true:
                            DispatchQueue.main.async {
                               
                                self.isAuthenticated = false
                            }
                        case false:
                            DispatchQueue.main.async {
                                self.showSuccessAlert("An error occurred")
                        }
                    }
                }
        }
        
    }
    fileprivate func showSuccessAlert(_ message: String) {
        let alert = UIAlertController(title: "Message", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
}
func plistValues(bundle: Bundle) -> (clientId: String, domain: String)? {
    guard
        let path = bundle.path(forResource: "Auth0", ofType: "plist"),
        let values = NSDictionary(contentsOfFile: path) as? [String: Any]
        else {
            print("Missing Auth0.plist file with 'ClientId' and 'Domain' entries in main bundle!")
            return nil
    }

    guard
        let clientId = values["ClientId"] as? String,
        let domain = values["Domain"] as? String
        else {
            print("Auth0.plist file at \(path) is missing 'ClientId' and/or 'Domain' entries!")
            print("File currently has the following entries: \(values)")
            return nil
    }
    return (clientId: clientId, domain: domain)
    
   
}

extension OnBoardingViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 1
    }
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 3
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        DispatchQueue.main.async(execute: collectionView.reloadData)

        // Operation
        OperationQueue.main.addOperation(collectionView.reloadData)
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "OnBoardingCell", for: indexPath) as! OnBoardingCell
        
        cell.backgroundColor = .lightGray
        
        cell.lblTitle.text = titles[indexPath.section]
        
        let imageNames = imageN[indexPath.section]
        
        cell.imgView.image = UIImage(named: imageNames)
        
        print(indexPath.section)
       
       
        if indexPath.section == 0 {

            btnGet.layer.isHidden = true
           
            pControl.layer.isHidden = false
            btnSkip.layer.isHidden = false
            btnCon.layer.isHidden = false
            pControl.currentPage = indexPath.section
            btnCon.addTarget(self, action: #selector(onContinue), for: .touchUpInside)
            btnSkip.addTarget(self, action: #selector(onSkip), for: .touchUpInside)
            stylePageControl()
           
            }
        
        if  indexPath.section == 1{
           
          

            btnGet.layer.isHidden = true
            pControl.layer.isHidden = false
            btnSkip.layer.isHidden = false
            btnCon.layer.isHidden = false
          
            pControl.currentPage = indexPath.section
            btnCon.addTarget(self, action: #selector(ongoToGet), for: .touchUpInside)
            btnSkip.addTarget(self, action: #selector(onSkip), for: .touchUpInside)
            stylePageControl1()
           
        
        }

        if  indexPath.section == 2{
            btnGet.layer.isHidden = false
            pControl.layer.isHidden = true
            btnSkip.layer.isHidden = true
            btnCon.layer.isHidden = true
            stylePageControl2()
        }
        
      
       
        
        return cell
       
        
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print(indexPath.section)
    }
    
    @objc func onContinue()
    {
        colletionView.isPagingEnabled = false
        print("you tapped")
        let indexPath = IndexPath(item: 0, section: 1)
        colletionView?.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
        colletionView.isPagingEnabled = true
        colletionView.reloadData()
        
    }
    @objc func ongoToGet()
    {
        colletionView.isPagingEnabled = false
        print("you tapped")
        let indexPath = IndexPath(item: 0, section: 2)
        colletionView?.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
        colletionView.isPagingEnabled = true
        colletionView.reloadData()
       
    }
    @objc func onSkip()
    {
        colletionView.isPagingEnabled = false
        print("you tapped")
        let indexPath = IndexPath(item: 0, section: 2)
        colletionView?.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
        colletionView.isPagingEnabled = true
        colletionView.reloadData()
    }
   
    
    
}
extension OnBoardingViewController: UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: view.frame.width, height: view.frame.height)
    }
    
    
}

