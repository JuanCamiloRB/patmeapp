//
//  TestMaterialViewController.swift
//  patmeapp
//
//  Created by Juan Camilo on 21/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MaterialComponents.MaterialChips
import MaterialComponents.MaterialTextFields
import MaterialComponents.MDCChipCollectionViewCell
protocol TestMaterialDisplayLogic: AnyObject
{
  func displaySomething(viewModel: TestMaterial.Something.ViewModel)
}
@IBDesignable
class TestMaterialViewController: ResourcesViewController, TestMaterialDisplayLogic
{
  var interactor: TestMaterialBusinessLogic?
  var router: (NSObjectProtocol & TestMaterialRoutingLogic & TestMaterialDataPassing)?
    
  let layout = MDCChipCollectionViewFlowLayout()
  var lista = ["Hola","que mas", "pues"]
  let identi = "identifier"
  private var textIn: MDCTextField!
    private var controller: MDCTextInputControllerOutlined!
    private var placeHolderText = "Hola"
    private let textColor = UIColor(red: (250/255.0), green: (191/255.0), blue: (161/255.0), alpha: 1.0)
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var textInput: UITextField!
    @IBOutlet weak var viewController: UIView!
    // MARK: Object lifecycle
    @IBInspectable var setPlaceholder: String{
        get{
            
            return placeHolderText
        }
        set(str){
            placeHolderText = str
        }
    }
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TestMaterialInteractor()
    let presenter = TestMaterialPresenter()
    let router = TestMaterialRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setupInputView()
    textInput.isHidden = true
      textInput.delegate = self
    setupContoller()
      hideKeyboardWhenTappedAround(onView: self.view)
    
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
      DispatchQueue.main.async {
      
          self.textInput.becomeFirstResponder()
      }
  }
    @objc func keyboardWillShow(notification:NSNotification) {
        
        guard let userInfo = notification.userInfo else { return }
        var keyboardFrame:CGRect = (userInfo[UIResponder.keyboardFrameBeginUserInfoKey] as! NSValue).cgRectValue
        keyboardFrame = view.convert(keyboardFrame, from: nil)
        
        var contentInset:UIEdgeInsets = self.scrollView.contentInset
        contentInset.bottom = keyboardFrame.size.height + 20
        scrollView.contentInset = contentInset
    }
    
    @objc func keyboardWillHide(notification:NSNotification) {
        
        let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
     
     
    }
    
    private func setupInputView(){
        //MARK: Text Input Setup
        
        if let _ = view.viewWithTag(1){return}
        textIn = MDCTextField()
        textIn.tag = 1
        textIn.font = UIFont(name: "Rubik", size: 16)
        textIn.translatesAutoresizingMaskIntoConstraints = false
        textIn.placeholderLabel.isEnabled = true
        textIn.isEnabled = true
        textIn.sizeToFit()
        textIn.rightViewMode = .always
        textIn.clearButton.isHidden = true
        textIn.placeholderLabel.font = UIFont(name: "Rubik", size: 40)
        textIn.placeholderLabel.backgroundColor =  UIColor(red: (247/255.0), green: (243/255.0), blue: (240/255.0), alpha: 1.0)
        view.addSubview(textIn)
        textIn.placeholder = placeHolderText
        textIn.delegate = self
        textIn.textColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        NSLayoutConstraint.activate([
            (textIn.topAnchor.constraint(equalTo: textInput.topAnchor)),
            (textIn.bottomAnchor.constraint(equalTo: textInput.bottomAnchor)),
            (textIn.leadingAnchor.constraint(equalTo: textInput.leadingAnchor)),
            (textIn.trailingAnchor.constraint(equalTo: textInput.trailingAnchor))
        ])
    }
    
    private func setupContoller(){
        // MARK: Text Input Controller Setup
        
        controller = MDCTextInputControllerOutlined(textInput: textIn)
        
        controller.activeColor = textColor
        controller.normalColor = textColor
        controller.textInput?.textColor = UIColor(red: (26/255.0), green: (26/255.0), blue: (26/255.0), alpha: 1.0)
        controller.inlinePlaceholderColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderActiveColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderNormalColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.textInputFont = UIFont(name: "Rubik", size: 16)
        controller.textInputClearButtonTintColor =  UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.borderRadius = 16
        controller.leadingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.inlinePlaceholderFont = UIFont(name: "Rubik", size: 16)
        controller.trailingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.floatingPlaceholderScale = 1.0000001
        controller.isAccessibilityElement = true
        controller.isFloatingEnabled = true
        
        
        controller.underlineHeightActive = 20
        
    }
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = TestMaterial.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: TestMaterial.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}


extension TestMaterialViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        //For mobile numer validation
  
        if textField == textIn {
            
            DispatchQueue.main.async{
                
                var text: String = self.textIn.text!
                
              
                
               
            }
            let texto = textInput.text ?? ""
          
            if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! > 2 && ((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! < 21) {
              
                
    
               
             
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! >= 21) {
                
                

                
                
                
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! <= 2) {
               
                
            }
            let allowedCharacters = CharacterSet(charactersIn:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ")//Here change this characters based on your requirement
            let characterSet = CharacterSet(charactersIn: string)
            return allowedCharacters.isSuperset(of: characterSet)
            
            
        }
        return true
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        
        if textField == textIn {
          
            let texto = textIn.text ?? ""
            if (texto.count > 1 && texto.count < 21) {
             
            
                
            }
          
        }
        
    }
    
    
}
