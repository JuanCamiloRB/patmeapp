//
//  TestViewController.swift
//  patmeapp
//
//  Created by Juan Camilo on 26/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MaterialComponents.MaterialTextFields
protocol TestDisplayLogic: AnyObject
{
  func displaySomething(viewModel: Test.Something.ViewModel)
}
@IBDesignable
class TestViewController: UIViewController, TestDisplayLogic
{
  var interactor: TestBusinessLogic?
  var router: (NSObjectProtocol & TestRoutingLogic & TestDataPassing)?
    var textos = String()
    var petName = String()
    var tokenId: String? = ""
    var genere = String()
    var checkBtn = true
    private var textInput: PatMeMDCTextInput!
    private var controller: MDCTextInputController!
    private let textColor = UIColor(red: (250/255.0), green: (191/255.0), blue: (161/255.0), alpha: 1.0)
    let checkf =  UIImage(named: "check")
    let checkEmpty =  UIImage(named: "Check_circle")
    let eyeIcon = UIImageView(image: UIImage(named: "CheckIcon"))
    // Dynamic dark & light color created in the assets folder
   
    @IBOutlet weak var descLbl: UILabel!
    
    @IBOutlet weak var checkFill: UIButton!
    @IBOutlet weak var textIn: UITextField!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var contiBtn: UIView!
    @IBOutlet weak var scrollView: UIScrollView!
    
    
    // MARK: Object lifecycle
    @IBInspectable var setPlaceholder: String{
        get{
            
            return placeHolderText + textos
        }
        set(str){
            placeHolderText = str + textos
        }
    }
    private var placeHolderText = ""
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TestInteractor()
    let presenter = TestPresenter()
    let router = TestRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
      print("hola",textos)
      var txt = NSLocalizedString("register_view_title_txt_1", comment: "") + textos + NSLocalizedString("register_view_title_txt_2", comment: "")
      lblName.text = txt
      placeHolderText = "Name of the " + textos
      setupInputView()
      setupContoller()
      textIn.isHidden = true
    
    
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
      setupInputView()
      setupContoller()
      lblName.text = txt
   
  
  }
    @objc func keyboardWillShow(notification:NSNotification) {
        
        guard let userInfo = notification.userInfo else { return }
        var keyboardFrame:CGRect = (userInfo[UIResponder.keyboardFrameBeginUserInfoKey] as! NSValue).cgRectValue
        keyboardFrame = view.convert(keyboardFrame, from: nil)
        
        var contentInset:UIEdgeInsets = self.scrollView.contentInset
        contentInset.bottom = keyboardFrame.size.height + 20
        scrollView.contentInset = contentInset
    }
    
    @objc func keyboardWillHide(notification:NSNotification) {
        
        let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
    }
    private func setupInputView(){
        //MARK: Text Input Setup
        
        if let _ = view.viewWithTag(1){return}
        textInput = PatMeMDCTextInput()
        textInput.setup()
        view.addSubview(textInput)
        textInput.placeholder = placeHolderText
        textInput.delegate = self
        NSLayoutConstraint.activate([
            (textInput.topAnchor.constraint(equalTo: textIn.topAnchor)),
            (textInput.bottomAnchor.constraint(equalTo: textIn.bottomAnchor)),
            (textInput.leadingAnchor.constraint(equalTo: textIn.leadingAnchor)),
            (textInput.trailingAnchor.constraint(equalTo: textIn.trailingAnchor))
        ])
    }
    
    private func setupContoller(){
        // MARK: Text Input Controller Setup
        
        controller = MDCTextInputController(textInput: textInput)
        controller.setup()
        
        controller.activeColor = textColor
        controller.normalColor = textColor
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Test.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Test.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}
extension TestViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        //For mobile numer validation
        textInput.trailingView = eyeIcon
        if textField == textInput {
            DispatchQueue.main.async{
                
                var text: String = self.textInput.text!
                
                self.petName = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? ""
                
                let replaced = self.petName.replacingOccurrences(of: "Optional", with: "Small")
                self.petName = replaced
                print(replaced)
            }
            let texto = textInput.text ?? ""
            print(((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)!)
            if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! > 1 && ((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! < 21) {
                print(texto.count)
                textInput.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
               
                contiBtn.alpha = 1
                
                eyeIcon.isHidden = false
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! >= 21) {
                print(texto.count)
                
                textIn.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
                eyeIcon.isHidden = true
            
                contiBtn.alpha = 0.3
                
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! <= 1) {
                print(texto.count)
                contiBtn.isAccessibilityElement = false
                eyeIcon.isHidden = true
                contiBtn.alpha = 0.3
                
            }
            let allowedCharacters = CharacterSet(charactersIn:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ")//Here change this characters based on your requirement
            let characterSet = CharacterSet(charactersIn: string)
            return allowedCharacters.isSuperset(of: characterSet)
            
            
        }
        return true
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        
        if textField == textIn {
            print("You edit myTextField")
            let texto = textIn.text ?? ""
            if (texto.count > 1 && texto.count < 21) {
                print("Conteo",texto.count)
                textInput.rightViewMode = .always
                
                textInput.trailingView = eyeIcon
                eyeIcon.isHidden = false
                
            }
        
        }
        
    }
    
}
