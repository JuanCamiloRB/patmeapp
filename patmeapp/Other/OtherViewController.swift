//
//  OtherViewController.swift
//  patmeapp
//
//  Created by Juan Camilo on 28/12/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

import MaterialComponents.MaterialTextControls_OutlinedTextFields

protocol OtherDisplayLogic: AnyObject
{
    func displaySomething(viewModel: Other.Something.ViewModel)
}

@IBDesignable
class OtherViewController: ResourcesViewController, OtherDisplayLogic
{
    private var textIn: MDCTextField!
    private var controller: MDCTextInputControllerOutlined!
    private let textColor = UIColor(red: (250/255.0), green: (191/255.0), blue: (161/255.0), alpha: 1.0)
    // Dynamic dark & light color created in the assets folder
    private var placeHolderText = NSLocalizedString("other_view_title_txt_2", comment: "")
    var interactor: OtherBusinessLogic?
    var router: (NSObjectProtocol & OtherRoutingLogic & OtherDataPassing)?
    var specieResources = [Resource]()
    var updatedString = String()
    var customSpecie: Resource!
    var tokenId = String()
    var petObject: PetModel!
    let eyeIcon = UIImageView(image: UIImage(named: "CheckIcon"))
    var keyboardHeight = CGFloat(0)
    @IBOutlet weak var iconCheck: UIImageView!
    @IBOutlet weak var scrollView: UIScrollView!
   
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var contiBtn: UIButton!
    @IBOutlet weak var textInput: UITextField!
    
    @IBOutlet weak var backView: UIView!
    @IBOutlet weak var tableView: UITableView!
    //var pets = [String]()
    // MARK: Object lifecycle
    @IBInspectable var setPlaceholder: String{
        get{
            return placeHolderText
        }
        set(str){
            placeHolderText = str
        }
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = OtherInteractor()
        let presenter = OtherPresenter()
        let router = OtherRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        lblTitle.text = NSLocalizedString("other_view_title_txt_1", comment: "")
        contiBtn.setTitle(NSLocalizedString("other_view_title_btn_1", comment: ""), for: .normal)
        contiBtn.alpha = 0.3
        textInput.addTarget(self, action: #selector(myTargetFunction), for: .touchDown)
        textInput.delegate = self
        tableView.delegate = self
        tableView.dataSource = self
        tableView.reloadData()
        iconCheck.isHidden = true
        tableView.register(UINib(nibName: "OtherTableViewCell", bundle: nil), forCellReuseIdentifier: "OtherTableViewCell")
        tableView.layer.cornerRadius = 16
        textInput.layer.cornerRadius = 16
        contiBtn.layer.cornerRadius = 16
        hideKeyboardWhenTappedAround(onView: self.view)
        var text: String = textInput.text!
        print("El texto es:", text)
        
        eyeIcon.isHidden = true
        self.tableView.allowsMultipleSelection = false
        ResourceService.GetPetSpecie(completion: { (result) -> () in
            self.makeGetCall(species: result)})
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.tableView.beginUpdates()
            self.tableView.endUpdates()
            self.textInput.becomeFirstResponder()
        }
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
        setupInputView()
        setupContoller()
        textInput.isHidden = true
        
        
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @objc func keyboardWillShow(notification:NSNotification) {
        
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
                  keyboardHeight = keyboardSize.height
               
                    // The 1st keyboardWillShow gets the keyboard size height then observer removed as no need to get keyboard height every time it shows or hides
                    NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
                    
                    // Store KeyboardHeight in UserDefaults to use when in Edit Mode
                    UserDefaults.standard.set(keyboardHeight, forKey: "KeyboardHeight")
                    UserDefaults.standard.synchronize()
                }
      
    
    }
    
    @objc func keyboardWillHide(notification:NSNotification) {
        
        let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
      
    }
    func doSomething()
    {
        let request = Other.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    private func setupInputView(){
        //MARK: Text Input Setup
        
        if let _ = view.viewWithTag(1){return}
        textIn = MDCTextField()
        textIn.tag = 1
        textIn.font = UIFont(name: "Rubik", size: 16)
        textIn.translatesAutoresizingMaskIntoConstraints = false
        textIn.placeholderLabel.isEnabled = true
        textIn.isEnabled = true
        textIn.sizeToFit()
        textIn.rightViewMode = .always
        textIn.clearButton.isHidden = true
        textIn.trailingView = eyeIcon
        textIn.placeholderLabel.font = UIFont(name: "Rubik", size: 40)
        textIn.placeholderLabel.backgroundColor =  UIColor(red: (247/255.0), green: (243/255.0), blue: (240/255.0), alpha: 1.0)
        eyeIcon.isHidden = true
        view.addSubview(textIn)
        textIn.placeholder = placeHolderText
        textIn.delegate = self
        textIn.textColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        NSLayoutConstraint.activate([
            (textIn.topAnchor.constraint(equalTo: textInput.topAnchor)),
            (textIn.bottomAnchor.constraint(equalTo: textInput.bottomAnchor)),
            (textIn.leadingAnchor.constraint(equalTo: textInput.leadingAnchor)),
            (textIn.trailingAnchor.constraint(equalTo: textInput.trailingAnchor))
        ])
        
    }
    
    private func setupContoller(){
        // MARK: Text Input Controller Setup
        
        controller = MDCTextInputControllerOutlined(textInput: textIn)
        
        controller.activeColor = textColor
        controller.normalColor = textColor
        controller.textInput?.textColor = UIColor(red: (26/255.0), green: (26/255.0), blue: (26/255.0), alpha: 1.0)
        controller.inlinePlaceholderColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderActiveColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderNormalColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.textInputFont = UIFont(name: "Rubik", size: 16)
        controller.textInputClearButtonTintColor =  UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.borderRadius = 16
        controller.leadingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.inlinePlaceholderFont = UIFont(name: "Rubik", size: 16)
        controller.trailingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.floatingPlaceholderScale = 1.0000001
        controller.isAccessibilityElement = true
        controller.isFloatingEnabled = true
        
        
        controller.underlineHeightActive = 20
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
    
    
    
    @IBAction func ApperCheckIcon(_ sender: Any) {
        var text: String = textInput.text!
        print("El texto es:", text)
    }
    func displaySomething(viewModel: Other.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    @objc func myTargetFunction(textField: UITextField) {
        print("myTargetFunction")
    }
    
    func makeGetCall(species: [Resource]){
        var specieslbl = [String]()
        for i in species{
            let label = i.label as! String
            let value = i.value as! String
            print("Label",label)
         
            self.specieResources.append(Resource(value: value, label: label))
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
        print(self.specieResources)
        
    }
    func validateCont(){
        contiBtn.isEnabled = customSpecie != nil
        contiBtn.alpha = (customSpecie != nil) ? 1.0 : 0.3
        
    }
    
    @IBAction func OnCtnBtn(_ sender: Any) {
        contiBtn.alpha = 0.7
        sendNextScreen(specie: customSpecie)
        
        
    }
    func sendNextScreen(specie: Resource){
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "RegisterPetViewController")as? RegisterPetViewController
        
        // you can set any value stored in the destination VC here
        petObject = PetModel(name: "",specie: MainSpeciesEnum.other,customSpecie: specie)
        vc!.petObject =  petObject
       
        self.navigationController?.pushViewController(vc!, animated: true)
    
    }
    @IBAction func OnBackBtn(_ sender: Any) {
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "StartWelcomeViewController")as? StartWelcomeViewController
        vc!.petObject =  petObject
       
        self.navigationController?.pushViewController(vc!, animated: true)
    }
    func animateViewMoving (_ up:Bool, moveValue :CGFloat){
   
        let movementDuration:TimeInterval = 0.3
            let movement:CGFloat = ( up ? -moveValue : moveValue)
            UIView.beginAnimations( "animateView", context: nil)
            UIView.setAnimationBeginsFromCurrentState(true)
            UIView.setAnimationDuration(movementDuration )
            self.contiBtn.frame = self.contiBtn.frame.offsetBy(dx: 0,  dy: movement)
            UIView.commitAnimations()
        print(keyboardHeight)
    
        print(up)
        }
    func sendNextScreen(specie: MainSpeciesEnum){
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "RegisterPetViewController")as? RegisterPetViewController
        
        // you can set any value stored in the destination VC here
        petObject = PetModel(name: "",specie: specie)
        vc!.petObject =  petObject
       
        self.navigationController?.pushViewController(vc!, animated: true)
    
    }
    
}

extension OtherViewController: UITableViewDataSource, UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return self.specieResources.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "OtherTableViewCell") as! OtherTableViewCell
        cell.lblPet.text = specieResources[indexPath.row].label
        cell.tag = indexPath.row
        
        return cell
    }
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
    }
    
    func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        let cell = tableView.cellForRow(at: indexPath) as! OtherTableViewCell
        
        
        if let oldIndex = tableView.indexPathForSelectedRow {
            let cell_old = tableView.cellForRow(at: oldIndex) as! OtherTableViewCell
            cell_old.iconCheck.image =  .none
        }
        cell.iconCheck.image = UIImage(named: "CheckIcon")
        print(cell.lblPet.text)
        eyeIcon.isHidden = true
        customSpecie = specieResources[cell.tag]
        
        
        let replaced = cell.lblPet.text?.replacingOccurrences(of: "Optional", with: "Small")
        updatedString = replaced ?? ""
        print(updatedString)
    validateCont()
        return indexPath
    }
    
    
}

extension OtherViewController: UITextFieldDelegate{
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        //For mobile numer validation
        textIn.trailingView = eyeIcon
        if textField == textIn {
            DispatchQueue.main.async{
                
                var text: String = self.textIn.text!
                
                self.updatedString = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? ""
                
                let replaced = self.updatedString.replacingOccurrences(of: "Optional", with: "Small")
                self.updatedString = replaced
                print(replaced)
                let texts = textField.text?.trimmingCharacters(in: .whitespaces) ?? ""
            
                self.eyeIcon.isHidden = true
                self.customSpecie = nil
                
                if (((texts as NSString?)?.replacingCharacters(in: range, with: string).count)! > 1 && ((texts as NSString?)?.replacingCharacters(in: range, with: string).count)! < 21) {
                    
                    self.textIn.rightViewMode = .always
                    self.customSpecie = Resource(value: texts, label: texts)
                    self.textIn.trailingView = self.eyeIcon
                    self.eyeIcon.isHidden = false
                    
                }
                self.validateCont()
            }
            
            let allowedCharacters = CharacterSet(charactersIn:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ")//Here change this characters based on your requirement
            let characterSet = CharacterSet(charactersIn: string)
            return allowedCharacters.isSuperset(of: characterSet)
            
            
        }
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        DispatchQueue.main.async {
            self.animateViewMoving(false, moveValue: self.keyboardHeight + 50)
        }
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        DispatchQueue.main.async {
            self.animateViewMoving(true, moveValue: self.keyboardHeight + 50 )
        }
        if textField == textIn {
            print("You edit myTextField")
            let texto = textIn.text ?? ""
            if (texto.count > 1 && texto.count < 21) {
                print("Conteo",texto.count)
                textIn.rightViewMode = .always
                textIn.trailingView = eyeIcon
                eyeIcon.isHidden = false
                
            }
            if let oldIndex = tableView.indexPathForSelectedRow {
                let cell_old = tableView.cellForRow(at: oldIndex) as! OtherTableViewCell
                cell_old.iconCheck.image =  .none
            }
        }
        
    }
 
    
}

