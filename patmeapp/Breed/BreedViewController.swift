//
//  BreedViewController.swift
//  patmeapp
//
//  Created by Juan Camilo on 18/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MaterialComponents.MaterialTextFields
import TagCellLayout

protocol BreedDisplayLogic: AnyObject
{
  func displaySomething(viewModel: Breed.Something.ViewModel)
}
@IBDesignable
class BreedViewController: ResourcesViewController, BreedDisplayLogic
{
  
    
  var interactor: BreedBusinessLogic?
  var router: (NSObjectProtocol & BreedRoutingLogic & BreedDataPassing)?
   
    var keyboardHeight = CGFloat(0)
    var checkBtn = true
    var updatedString = String()
    var breedUp = String()
    var breedList = [BreedModel]()
    var breeds = [BreedModel]()
    var searchActive : Bool = false
    var petObject: PetModel!
    
    private var textIn: MDCTextField!
    private var controller: MDCTextInputControllerOutlined!
    private let textColor = UIColor(red: (250/255.0), green: (191/255.0), blue: (161/255.0), alpha: 1.0)
    var tmpBreedList = [BreedModel]()
    let searchIcon =  UIImageView(image: UIImage(named: "SearchIcon"))
    
    var breedPet = ["Malamute", "Maliff","Malinois","Maltese","Add mall"]
    var filtered:[BreedModel] = []
    let identi = "identifier"
    private var placeHolderText = ""
    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var titleLbl: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var contBtn: UIButton!
    
    @IBOutlet weak var myView: UIView!
    @IBOutlet weak var textInput: UITextField!
    @IBOutlet weak var lblMixed: UILabel!
    @IBOutlet weak var switchBtn: UISwitch!
    @IBOutlet weak var collectionView: UICollectionView!

    
    @IBOutlet weak var addLater: UIButton!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBInspectable var setPlaceholder: String{
        get{
            
            return placeHolderText + petObject.specie.getLocalizable()
        }
        set(str){
            placeHolderText = str + petObject.specie.getLocalizable()
        }
    }
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = BreedInteractor()
    let presenter = BreedPresenter()
    let router = BreedRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
       self.collectionView.dataSource = self
      self.collectionView.reloadData()
      self.collectionView.register(
            MDCChipCollectionViewCell.self,
            forCellWithReuseIdentifier: identi)
      self.collectionView.reloadData()
      placeHolderText = NSLocalizedString("breed_view_title_placejolder", comment: "")
      setupInputView()
      setupContoller()
      titleLbl.text = String(format: NSLocalizedString("breed_view_title_txt_2", comment: ""),petObject.name)
      lblMixed.text = NSLocalizedString("breed_view_title_txt_3", comment: "")
      addLater.setTitle(NSLocalizedString("breed_view_title_btn_1", comment: ""), for: .normal)
      if petObject.breeds != nil {
          breedList = petObject.breeds!
          
      }
      
      textInput.delegate = self
      tableView.isHidden = true
      textInput.isHidden = true
      addLater.isHidden = false
      contBtn.isHidden = true
      tableView.register(UINib(nibName: "BreedTableViewCell", bundle: nil), forCellReuseIdentifier: "BreedTableViewCell")
      tableView.delegate = self
      tableView.dataSource = self
      tableView.reloadData()
      ResourceService.GetPetBreed(specie: petObject.specie, completion: { (result) -> () in
          self.makeGetCall(species: result)})
      hideKeyboardWhenTappedAround(onView: self.view)
      DispatchQueue.main.async {
      
          self.textInput.becomeFirstResponder()
          
      }
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name:UIResponder.keyboardWillShowNotification, object: nil)
      NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name:UIResponder.keyboardWillHideNotification, object: nil)
      DispatchQueue.main.async {
      
          self.textInput.becomeFirstResponder()
      }
      
      
  }
    @objc func tapRecognized() {
       tableView.isHidden = true
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @objc func keyboardWillShow(notification:NSNotification) {
        
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
                  keyboardHeight = keyboardSize.height
               
                    // The 1st keyboardWillShow gets the keyboard size height then observer removed as no need to get keyboard height every time it shows or hides
                    NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
                    
                    // Store KeyboardHeight in UserDefaults to use when in Edit Mode
                    UserDefaults.standard.set(keyboardHeight, forKey: "KeyboardHeight")
                    UserDefaults.standard.synchronize()
                }
    }
    
    @objc func keyboardWillHide(notification:NSNotification) {
        
        let contentInset:UIEdgeInsets = UIEdgeInsets.zero
        scrollView.contentInset = contentInset
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                // do stuff 42 seconds later
            self.tableView.isHidden = true
            }
     
    }
    func filter(){
    
var updatedStrigNormalize = StringUtils.normalize(string: updatedString)
        
         filtered = breeds.filter({ (breedUp) -> Bool in
             var breedUpNormalize = StringUtils.normalize(string: breedUp.label)
             return breedUpNormalize.contains(updatedStrigNormalize) && ((breedList.first(where: {breedUpNormalize  == StringUtils.normalize(string: $0.label)})) == nil)
             
           })
        if breeds.first(where: {StringUtils.normalize(string: $0.label) == updatedStrigNormalize}) == nil && breedList.first(where: {StringUtils.normalize(string: $0.label) == updatedStrigNormalize}) == nil{
            filtered.append(BreedModel(value: updatedString, label: updatedString, isnew: true))
            
        }
        self.tableView.reloadData()
        print(updatedString)
        print("updatestring")
        print(filtered)
        
        
        
    }
  func doSomething()
  {
    let request = Breed.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Breed.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    private func setupInputView(){
        //MARK: Text Input Setup
        
        if let _ = view.viewWithTag(1){return}
        textIn = MDCTextField()
        textIn.tag = 1
        textIn.font = UIFont(name: "Rubik", size: 16)
        textIn.translatesAutoresizingMaskIntoConstraints = false
        textIn.placeholderLabel.isEnabled = true
        textIn.isEnabled = true
        textIn.sizeToFit()
        textIn.rightViewMode = .always
        textIn.clearButton.isHidden = true
        textIn.trailingView = searchIcon
        textIn.placeholderLabel.font = UIFont(name: "Rubik", size: 40)
        textIn.placeholderLabel.backgroundColor =  UIColor(red: (247/255.0), green: (243/255.0), blue: (240/255.0), alpha: 1.0)
        view.addSubview(textIn)
        textIn.placeholder = placeHolderText
        textIn.delegate = self
        textIn.textColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        NSLayoutConstraint.activate([
            (textIn.topAnchor.constraint(equalTo: textInput.topAnchor)),
            (textIn.bottomAnchor.constraint(equalTo: textInput.bottomAnchor)),
            (textIn.leadingAnchor.constraint(equalTo: textInput.leadingAnchor)),
            (textIn.trailingAnchor.constraint(equalTo: textInput.trailingAnchor))
        ])
    }
    
    private func setupContoller(){
        // MARK: Text Input Controller Setup
        
        controller = MDCTextInputControllerOutlined(textInput: textIn)
        
        controller.activeColor = textColor
        controller.normalColor = textColor
        controller.textInput?.textColor = UIColor(red: (26/255.0), green: (26/255.0), blue: (26/255.0), alpha: 1.0)
        controller.inlinePlaceholderColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderActiveColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.floatingPlaceholderNormalColor = UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.textInputFont = UIFont(name: "Rubik", size: 16)
        controller.textInputClearButtonTintColor =  UIColor(red: (128/255.0), green: (125/255.0), blue: (124/255.0), alpha: 1.0)
        controller.borderRadius = 16
        controller.leadingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.inlinePlaceholderFont = UIFont(name: "Rubik", size: 16)
        controller.trailingUnderlineLabelFont = UIFont(name: "Rubik", size: 40)
        controller.floatingPlaceholderScale = 1.0000001
        controller.isAccessibilityElement = true
        controller.isFloatingEnabled = true
        controller.underlineHeightActive = 20
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    }
    @IBAction func onBackBtn(_ sender: Any) {
      goBackScreen()
        
    }
    @IBAction func onContBtn(_ sender: Any) {
        sendNextScreen(breeds: breedList, isMixBreed: switchBtn.isOn)
    }
    
    @IBAction func onLater(_ sender: Any) {
        sendNextScreen(breeds: nil, isMixBreed: nil)
    }
    func sendNextScreen(breeds: [BreedModel]?, isMixBreed: Bool?){
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "BirthdayViewController")as? BirthdayViewController
        
        // you can set any value stored in the destination VC here
        petObject.breeds = breeds
        petObject.mixedBreed = isMixBreed
        vc!.petObject = petObject
        self.navigationController?.pushViewController(vc!, animated: true)
    
    }
    func goBackScreen(){
        let storyboard = UIStoryboard (name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: "RegisterPetPictureViewController")as? RegisterPetPictureViewController
        
        vc!.petObject =  petObject
       
        self.navigationController?.pushViewController(vc!, animated: true)
    
    }
    
    func makeGetCall(species: [Resource]){
        var specieslbl = [String]()
        for i in species{
            let label = i.label as! String
            let value = i.value as! String
            
            self.breeds.append(BreedModel(value: value, label: label))
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    
    @IBAction func onTurnSwc(_ sender: UISwitch) {
        if sender.isOn && !tmpBreedList.isEmpty{
               breedList = tmpBreedList
            collectionView.reloadData()
        }else if breedList.count > 1{
            tmpBreedList = breedList
            breedList = [breedList[0]]
           
         collectionView.reloadData()
         }
            
       
    }
    func animateViewMoving (_ up:Bool, moveValue :CGFloat){
            let movementDuration:TimeInterval = 0.3
            let movement:CGFloat = ( up ? -moveValue : moveValue)
            UIView.beginAnimations( "animateView", context: nil)
            UIView.setAnimationBeginsFromCurrentState(true)
            UIView.setAnimationDuration(movementDuration )
            self.contBtn.frame = self.contBtn.frame.offsetBy(dx: 0,  dy: movement)
        self.addLater.frame = self.addLater.frame.offsetBy(dx: 0,  dy: movement)
            UIView.commitAnimations()
    print("Moviendo")
        
    }
 
}

extension BreedViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        //For mobile numer validation
  
        if textField == textIn {
            
            DispatchQueue.main.async{
                
                var text: String = self.textIn.text!
                
                self.updatedString = (textField.text as NSString?)?.replacingCharacters(in: range, with: string) ?? ""
                
                let replaced = self.updatedString.replacingOccurrences(of: "Optional", with: "Small")
                self.updatedString = replaced
            print(self.updatedString)
                self.filter()
            }
            let texto = textInput.text ?? ""
          
            if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! > 2 && ((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! < 21) {
              
                
    
                self.tableView.reloadData()
                textIn.rightViewMode = .always
                tableView.isHidden = false
                //switchBtn.isHidden = true
               // collectionView.isHidden = true
                contBtn.isEnabled = true
                contBtn.isHidden = false
                contBtn.alpha = 1
              
                addLater.isHidden = true
             
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! >= 21) {
                textIn.rightViewMode = .always
                tableView.isHidden = true
                switchBtn.isHidden = false
        
                collectionView.isHidden = false
                contBtn.isEnabled = false
                contBtn.alpha = 0.3
                
                
            }
            else if (((textField.text as NSString?)?.replacingCharacters(in: range, with: string).count)! <= 2) {
               
                textIn.rightViewMode = .always
                tableView.isHidden = true
                switchBtn.isHidden = false
                contBtn.isAccessibilityElement = false
                collectionView.isHidden = false
                addLater.isHidden = false
                contBtn.isHidden = true
                
            }
            let allowedCharacters = CharacterSet(charactersIn:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ")//Here change this characters based on your requirement
            let characterSet = CharacterSet(charactersIn: string)
            return allowedCharacters.isSuperset(of: characterSet)
            
            
        }
        return true
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
       
        DispatchQueue.main.async {
            self.animateViewMoving(false, moveValue: self.keyboardHeight + 50)
        }
        print("down")
          
    }
    func textFieldDidBeginEditing(_ textField: UITextField) {
        DispatchQueue.main.async {
            self.animateViewMoving(true, moveValue: self.keyboardHeight + 50 )
        }
        if textField == textIn {
          
            let texto = textIn.text ?? ""
            if (texto.count > 1 && texto.count < 21) {
             
            
                
            }
          
        }
        
    }
    
    
}
extension BreedViewController: UITableViewDataSource, UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
               return filtered.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "BreedTableViewCell") as! BreedTableViewCell
        var breedItem = filtered[indexPath.row]
        cell.breedLbl.text = filtered[indexPath.row].label
        if breedItem.isnew{
            
            let attrs = [NSAttributedString.Key.font : UIFont.boldSystemFont(ofSize: 16)]
            let attributedString = NSMutableAttributedString(string:breedItem.label, attributes:attrs)
             
            let attributed = NSMutableAttributedString(string:NSLocalizedString("breed_view_title_txt_1", comment: ""))
            attributed.append(attributedString)
            cell.breedLbl.attributedText = attributed
        
        }
        
          
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        let cell = tableView.cellForRow(at: indexPath) as! BreedTableViewCell
        
        if let oldIndex = tableView.indexPathForSelectedRow {
            let cell_old = tableView.cellForRow(at: oldIndex) as! BreedTableViewCell
            
        }
        textIn.clearText()
      //let replaced = cell.breedLbl.text?.replacingOccurrences(of: "Optional", with: "Small")
       // breedUp = replaced ?? ""
      
        if  breedList.count <= 4{
            //breedList.append(breedUp)
            breedList.append(filtered[indexPath.row])
            tmpBreedList = []
        
            self.collectionView.reloadData()
            self.tableView.reloadData()
        }
        
  
        tableView.isHidden = true
        
        
        return indexPath
    }
    func tableView(_ tableView: UITableView,didUpdateFocusIn context:UITableViewFocusUpdateContext,
                   with coordinator: UIFocusAnimationCoordinator){
    }
   
    
}
extension BreedViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return breedList.count
    }
    
    func collectionView(_ collectionView: UICollectionView,cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
      let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identi, for: indexPath) as! MDCChipCollectionViewCell
        let chipView = cell.chipView
      // configure the chipView to be a choice chip
        cell.chipView.backgroundColor = .white
        chipView.layer.borderWidth = 2.5
        chipView.setBorderColor(.black, for: .normal)
        chipView.setBorderWidth(2.5, for: .normal)
        chipView.setBackgroundColor(.white, for: .normal)
        let closeActionImageView = UIImageView(image: UIImage(named: "icon_delete"))
        cell.chipView.accessoryView = closeActionImageView
        cell.chipView.accessoryView?.tag = indexPath.row
        cell.chipView.accessoryView?.addGestureRecognizer(UITapGestureRecognizer(target: self, action:  #selector(BreedViewController.deleteChip(sender:))))
        cell.chipView.accessoryView?.isUserInteractionEnabled = true
        var breedItem = breedList[indexPath.row]
        chipView.titleLabel.text = breedItem.label
        chipView.sizeToFit()
        cell.sizeToFit()
        collectionView.sizeToFit()
     
       
             
    
        
        if breedList.count > 1 {
            switchBtn.setOn(true, animated: true)
          
            
        }
        
        return cell
    }
    
    @objc func deleteChip(sender: UITapGestureRecognizer){
        
        
       
        tmpBreedList = []
        var delete = sender.view as! UIImageView
        breedList.remove(at: delete.tag)
            self.collectionView.reloadData()
            self.tableView.reloadData()
        self.collectionView.reloadData()
        self.tableView.reloadData()
        if breedList.count < 2 {
            switchBtn.setOn(false, animated: true)
          
            
        }
        
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
      // For action chips, we never want the chip to stay in selected state.
      // Other possible apporaches would be relying on theming or Customizing collectionViewCell
      // selected state.
      collectionView.deselectItem(at: indexPath, animated: false)
      // Trigger the action
      
    }
    
    
}

